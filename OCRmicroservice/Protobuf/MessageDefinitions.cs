// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageDefinitions.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from MessageDefinitions.proto</summary>
public static partial class MessageDefinitionsReflection
{

    #region Descriptor
    /// <summary>File descriptor for MessageDefinitions.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageDefinitionsReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChhNZXNzYWdlRGVmaW5pdGlvbnMucHJvdG8iOgoIUG9sYXJvaWQSHwoKaW1h",
              "Z2VMYWJlbBgBIAEoDjILLkltYWdlTGFiZWwSDQoFaW1hZ2UYAiABKAkijQEK",
              "CURhdGFGaWVsZBIQCghmaWVsZEtleRgBIAEoCRIJCgF4GAIgASgCEgkKAXkY",
              "AyABKAISDQoFd2lkdGgYBCABKAISDgoGaGVpZ2h0GAUgASgCEg8KB2lzSW1h",
              "Z2UYBiABKAgSEwoLZG9vZGFkRm91bmQYByABKAgSEwoLZG9vZGFkSW1hZ2UY",
              "CCABKAkiYQoHUmVxdWVzdBINCgVpbWFnZRgBIAEoCRIbCgZ3YW50ZWQYAiAD",
              "KA4yCy5JbWFnZUxhYmVsEhUKDXRyYW5zYWN0aW9uSUQYAyABKAkSEwoLaXNT",
              "ZWNvbmRhcnkYBCABKAgijQIKCFJlc3BvbnNlEiMKDHJlc3BvbnNlQ29kZRgB",
              "IAEoDjINLlJlc3BvbnNlQ29kZRIZChFkZWJ1Z2dpbmdNZXNzYWdlcxgCIAMo",
              "CRIZCgZpbWFnZXMYAyADKAsyCS5Qb2xhcm9pZBIRCgl1c2VTdHJpY3QYBCAB",
              "KAgSEAoIbGFuZ3VhZ2UYBSABKAkSHgoKZGF0YUZpZWxkcxgGIAMoCzIKLkRh",
              "dGFGaWVsZBIVCg10cmFuc2FjdGlvbklEGAcgASgJEhYKDmNsYXNzaWZpY2F0",
              "aW9uGAggASgJEgwKBGtpbmQYCSABKAkSEwoLZGVzY3JpcHRpb24YCiABKAkS",
              "DwoHY291bnRyeRgLIAEoCSJCChJEYXRhRmllbGRWYWx1ZVBhaXISHQoJRGF0",
              "YUZpZWxkGAEgASgLMgouRGF0YUZpZWxkEg0KBVZhbHVlGAIgASgJIlMKC09D",
              "UlJlc3BvbnNlEjAKE0RhdGFGaWVsZFZhbHVlUGFpcnMYASADKAsyEy5EYXRh",
              "RmllbGRWYWx1ZVBhaXISEgoKSW1hZ2VMYWJlbBgCIAEoCSLhAgoHUGF5TG9h",
              "ZBIhCg9JbmNvbWluZ1JlcXVlc3QYASABKAsyCC5SZXF1ZXN0EioKF01hY2hp",
              "bmVMZWFybmluZ1Jlc3BvbnNlGAIgASgLMgkuUmVzcG9uc2USKgoUQnJ1dGVG",
              "b3JjZU9DUlJlc3VsdHMYAyABKAsyDC5PQ1JSZXNwb25zZRIoChJUYXJnZXRl",
              "ZE9DUlJlc3VsdHMYBCABKAsyDC5PQ1JSZXNwb25zZRITCgtUcnVzdFN0cmlj",
              "dBgFIAEoCBI8ChJQcm9jZXNzZWRPY3JSZXN1bHQYBiADKAsyIC5QYXlMb2Fk",
              "LlByb2Nlc3NlZE9jclJlc3VsdEVudHJ5EiMKDlVzZWRJbWFnZUxhYmVsGAcg",
              "ASgOMgsuSW1hZ2VMYWJlbBo5ChdQcm9jZXNzZWRPY3JSZXN1bHRFbnRyeRIL",
              "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBKrIBCgpJbWFnZUxhYmVs",
              "EhEKDURFRkFVTFRfVkFMVUUQABIUChBTVFJJQ1RfQ0FOT05JQ0FMEAESFAoQ",
              "QVBQUk9YX0NBTk9OSUNBTBACEhgKFFNFR01FTlRBVElPTl9NQVBfUkFXEAMS",
              "GgoWU0VHTUVOVEFUSU9OX01BUF9DTEVBThAEEhwKGEtFWVBPSU5UX0NPUlJF",
              "U1BPTkRFTkNFUxAFEhEKDUNMT1NFU1RfTUFUQ0gQBiqXAQoMUmVzcG9uc2VD",
              "b2RlEgYKAk9LEAASHwobTk9UX0VOT1VHSF9LRVlQT0lOVF9NQVRDSEVTEAES",
              "GQoVUFJPQkxFTV9MT0FESU5HX0lNQUdFEAISKAokQ0xBU1NJRklDQVRJT05f",
              "Tk9UX0ZPVU5EX0lOX0RBVEFCQVNFEAMSCwoHQUJPUlRFRBAEEgwKCERCX0VS",
              "Uk9SEAUqZQoLUk9JU2VydmljZXMSFwoTVEVNUExBVEVfQ09NUEFSSVNPThAA",
              "Eg8KC0ZBQ0VfU0VBUkNIEAESFwoTU0lHTkFUVVJFX0RFVEVDVElPThACEhMK",
              "D0VDSElQX0RFVEVDVElPThADYgZwcm90bzM="));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(new[] { typeof(global::ImageLabel), typeof(global::ResponseCode), typeof(global::ROIServices), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Polaroid), global::Polaroid.Parser, new[]{ "ImageLabel", "Image" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataField), global::DataField.Parser, new[]{ "FieldKey", "X", "Y", "Width", "Height", "IsImage", "DoodadFound", "DoodadImage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "Image", "Wanted", "TransactionID", "IsSecondary" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Response), global::Response.Parser, new[]{ "ResponseCode", "DebuggingMessages", "Images", "UseStrict", "Language", "DataFields", "TransactionID", "Classification", "Kind", "Description", "Country" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataFieldValuePair), global::DataFieldValuePair.Parser, new[]{ "DataField", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OCRResponse), global::OCRResponse.Parser, new[]{ "DataFieldValuePairs", "ImageLabel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PayLoad), global::PayLoad.Parser, new[]{ "IncomingRequest", "MachineLearningResponse", "BruteForceOCRResults", "TargetedOCRResults", "TrustStrict", "ProcessedOcrResult", "UsedImageLabel" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
            }));
    }
    #endregion

}
#region Enums
public enum ImageLabel
{
    [pbr::OriginalName("DEFAULT_VALUE")] DefaultValue = 0,
    [pbr::OriginalName("STRICT_CANONICAL")] StrictCanonical = 1,
    [pbr::OriginalName("APPROX_CANONICAL")] ApproxCanonical = 2,
    [pbr::OriginalName("SEGMENTATION_MAP_RAW")] SegmentationMapRaw = 3,
    [pbr::OriginalName("SEGMENTATION_MAP_CLEAN")] SegmentationMapClean = 4,
    [pbr::OriginalName("KEYPOINT_CORRESPONDENCES")] KeypointCorrespondences = 5,
    [pbr::OriginalName("CLOSEST_MATCH")] ClosestMatch = 6,
}

public enum ResponseCode
{
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("NOT_ENOUGH_KEYPOINT_MATCHES")] NotEnoughKeypointMatches = 1,
    [pbr::OriginalName("PROBLEM_LOADING_IMAGE")] ProblemLoadingImage = 2,
    [pbr::OriginalName("CLASSIFICATION_NOT_FOUND_IN_DATABASE")] ClassificationNotFoundInDatabase = 3,
    [pbr::OriginalName("ABORTED")] Aborted = 4,
    [pbr::OriginalName("DB_ERROR")] DbError = 5,
}

public enum ROIServices
{
    [pbr::OriginalName("TEMPLATE_COMPARISON")] TemplateComparison = 0,
    [pbr::OriginalName("FACE_SEARCH")] FaceSearch = 1,
    [pbr::OriginalName("SIGNATURE_DETECTION")] SignatureDetection = 2,
    [pbr::OriginalName("ECHIP_DETECTION")] EchipDetection = 3,
}

#endregion

#region Messages
public sealed partial class Polaroid : pb::IMessage<Polaroid>
{
    private static readonly pb::MessageParser<Polaroid> _parser = new pb::MessageParser<Polaroid>(() => new Polaroid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Polaroid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polaroid()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polaroid(Polaroid other) : this()
    {
        imageLabel_ = other.imageLabel_;
        image_ = other.image_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Polaroid Clone()
    {
        return new Polaroid(this);
    }

    /// <summary>Field number for the "imageLabel" field.</summary>
    public const int ImageLabelFieldNumber = 1;
    private global::ImageLabel imageLabel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ImageLabel ImageLabel
    {
        get { return imageLabel_; }
        set
        {
            imageLabel_ = value;
        }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 2;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image
    {
        get { return image_; }
        set
        {
            image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Polaroid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Polaroid other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (ImageLabel != other.ImageLabel) return false;
        if (Image != other.Image) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (ImageLabel != 0) hash ^= ImageLabel.GetHashCode();
        if (Image.Length != 0) hash ^= Image.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (ImageLabel != 0)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)ImageLabel);
        }
        if (Image.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Image);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (ImageLabel != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ImageLabel);
        }
        if (Image.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Polaroid other)
    {
        if (other == null)
        {
            return;
        }
        if (other.ImageLabel != 0)
        {
            ImageLabel = other.ImageLabel;
        }
        if (other.Image.Length != 0)
        {
            Image = other.Image;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        imageLabel_ = (global::ImageLabel)input.ReadEnum();
                        break;
                    }
                case 18:
                    {
                        Image = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class DataField : pb::IMessage<DataField>
{
    private static readonly pb::MessageParser<DataField> _parser = new pb::MessageParser<DataField>(() => new DataField());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataField()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataField(DataField other) : this()
    {
        fieldKey_ = other.fieldKey_;
        x_ = other.x_;
        y_ = other.y_;
        width_ = other.width_;
        height_ = other.height_;
        isImage_ = other.isImage_;
        doodadFound_ = other.doodadFound_;
        doodadImage_ = other.doodadImage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataField Clone()
    {
        return new DataField(this);
    }

    /// <summary>Field number for the "fieldKey" field.</summary>
    public const int FieldKeyFieldNumber = 1;
    private string fieldKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldKey
    {
        get { return fieldKey_; }
        set
        {
            fieldKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X
    {
        get { return x_; }
        set
        {
            x_ = value;
        }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y
    {
        get { return y_; }
        set
        {
            y_ = value;
        }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width
    {
        get { return width_; }
        set
        {
            width_ = value;
        }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height
    {
        get { return height_; }
        set
        {
            height_ = value;
        }
    }

    /// <summary>Field number for the "isImage" field.</summary>
    public const int IsImageFieldNumber = 6;
    private bool isImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImage
    {
        get { return isImage_; }
        set
        {
            isImage_ = value;
        }
    }

    /// <summary>Field number for the "doodadFound" field.</summary>
    public const int DoodadFoundFieldNumber = 7;
    private bool doodadFound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoodadFound
    {
        get { return doodadFound_; }
        set
        {
            doodadFound_ = value;
        }
    }

    /// <summary>Field number for the "doodadImage" field.</summary>
    public const int DoodadImageFieldNumber = 8;
    private string doodadImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DoodadImage
    {
        get { return doodadImage_; }
        set
        {
            doodadImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DataField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataField other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (FieldKey != other.FieldKey) return false;
        if (X != other.X) return false;
        if (Y != other.Y) return false;
        if (Width != other.Width) return false;
        if (Height != other.Height) return false;
        if (IsImage != other.IsImage) return false;
        if (DoodadFound != other.DoodadFound) return false;
        if (DoodadImage != other.DoodadImage) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (FieldKey.Length != 0) hash ^= FieldKey.GetHashCode();
        if (X != 0F) hash ^= X.GetHashCode();
        if (Y != 0F) hash ^= Y.GetHashCode();
        if (Width != 0F) hash ^= Width.GetHashCode();
        if (Height != 0F) hash ^= Height.GetHashCode();
        if (IsImage != false) hash ^= IsImage.GetHashCode();
        if (DoodadFound != false) hash ^= DoodadFound.GetHashCode();
        if (DoodadImage.Length != 0) hash ^= DoodadImage.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (FieldKey.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(FieldKey);
        }
        if (X != 0F)
        {
            output.WriteRawTag(21);
            output.WriteFloat(X);
        }
        if (Y != 0F)
        {
            output.WriteRawTag(29);
            output.WriteFloat(Y);
        }
        if (Width != 0F)
        {
            output.WriteRawTag(37);
            output.WriteFloat(Width);
        }
        if (Height != 0F)
        {
            output.WriteRawTag(45);
            output.WriteFloat(Height);
        }
        if (IsImage != false)
        {
            output.WriteRawTag(48);
            output.WriteBool(IsImage);
        }
        if (DoodadFound != false)
        {
            output.WriteRawTag(56);
            output.WriteBool(DoodadFound);
        }
        if (DoodadImage.Length != 0)
        {
            output.WriteRawTag(66);
            output.WriteString(DoodadImage);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (FieldKey.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldKey);
        }
        if (X != 0F)
        {
            size += 1 + 4;
        }
        if (Y != 0F)
        {
            size += 1 + 4;
        }
        if (Width != 0F)
        {
            size += 1 + 4;
        }
        if (Height != 0F)
        {
            size += 1 + 4;
        }
        if (IsImage != false)
        {
            size += 1 + 1;
        }
        if (DoodadFound != false)
        {
            size += 1 + 1;
        }
        if (DoodadImage.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DoodadImage);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataField other)
    {
        if (other == null)
        {
            return;
        }
        if (other.FieldKey.Length != 0)
        {
            FieldKey = other.FieldKey;
        }
        if (other.X != 0F)
        {
            X = other.X;
        }
        if (other.Y != 0F)
        {
            Y = other.Y;
        }
        if (other.Width != 0F)
        {
            Width = other.Width;
        }
        if (other.Height != 0F)
        {
            Height = other.Height;
        }
        if (other.IsImage != false)
        {
            IsImage = other.IsImage;
        }
        if (other.DoodadFound != false)
        {
            DoodadFound = other.DoodadFound;
        }
        if (other.DoodadImage.Length != 0)
        {
            DoodadImage = other.DoodadImage;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        FieldKey = input.ReadString();
                        break;
                    }
                case 21:
                    {
                        X = input.ReadFloat();
                        break;
                    }
                case 29:
                    {
                        Y = input.ReadFloat();
                        break;
                    }
                case 37:
                    {
                        Width = input.ReadFloat();
                        break;
                    }
                case 45:
                    {
                        Height = input.ReadFloat();
                        break;
                    }
                case 48:
                    {
                        IsImage = input.ReadBool();
                        break;
                    }
                case 56:
                    {
                        DoodadFound = input.ReadBool();
                        break;
                    }
                case 66:
                    {
                        DoodadImage = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class Request : pb::IMessage<Request>
{
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this()
    {
        image_ = other.image_;
        wanted_ = other.wanted_.Clone();
        transactionID_ = other.transactionID_;
        isSecondary_ = other.isSecondary_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone()
    {
        return new Request(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private string image_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Image
    {
        get { return image_; }
        set
        {
            image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "wanted" field.</summary>
    public const int WantedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ImageLabel> _repeated_wanted_codec
        = pb::FieldCodec.ForEnum(18, x => (int)x, x => (global::ImageLabel)x);
    private readonly pbc::RepeatedField<global::ImageLabel> wanted_ = new pbc::RepeatedField<global::ImageLabel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ImageLabel> Wanted
    {
        get { return wanted_; }
    }

    /// <summary>Field number for the "transactionID" field.</summary>
    public const int TransactionIDFieldNumber = 3;
    private string transactionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionID
    {
        get { return transactionID_; }
        set
        {
            transactionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "isSecondary" field.</summary>
    public const int IsSecondaryFieldNumber = 4;
    private bool isSecondary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSecondary
    {
        get { return isSecondary_; }
        set
        {
            isSecondary_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Image != other.Image) return false;
        if (!wanted_.Equals(other.wanted_)) return false;
        if (TransactionID != other.TransactionID) return false;
        if (IsSecondary != other.IsSecondary) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Image.Length != 0) hash ^= Image.GetHashCode();
        hash ^= wanted_.GetHashCode();
        if (TransactionID.Length != 0) hash ^= TransactionID.GetHashCode();
        if (IsSecondary != false) hash ^= IsSecondary.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Image.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(Image);
        }
        wanted_.WriteTo(output, _repeated_wanted_codec);
        if (TransactionID.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(TransactionID);
        }
        if (IsSecondary != false)
        {
            output.WriteRawTag(32);
            output.WriteBool(IsSecondary);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Image.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
        }
        size += wanted_.CalculateSize(_repeated_wanted_codec);
        if (TransactionID.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionID);
        }
        if (IsSecondary != false)
        {
            size += 1 + 1;
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Image.Length != 0)
        {
            Image = other.Image;
        }
        wanted_.Add(other.wanted_);
        if (other.TransactionID.Length != 0)
        {
            TransactionID = other.TransactionID;
        }
        if (other.IsSecondary != false)
        {
            IsSecondary = other.IsSecondary;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        Image = input.ReadString();
                        break;
                    }
                case 18:
                case 16:
                    {
                        wanted_.AddEntriesFrom(input, _repeated_wanted_codec);
                        break;
                    }
                case 26:
                    {
                        TransactionID = input.ReadString();
                        break;
                    }
                case 32:
                    {
                        IsSecondary = input.ReadBool();
                        break;
                    }
            }
        }
    }

}

public sealed partial class Response : pb::IMessage<Response>
{
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this()
    {
        responseCode_ = other.responseCode_;
        debuggingMessages_ = other.debuggingMessages_.Clone();
        images_ = other.images_.Clone();
        useStrict_ = other.useStrict_;
        language_ = other.language_;
        dataFields_ = other.dataFields_.Clone();
        transactionID_ = other.transactionID_;
        classification_ = other.classification_;
        kind_ = other.kind_;
        description_ = other.description_;
        country_ = other.country_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone()
    {
        return new Response(this);
    }

    /// <summary>Field number for the "responseCode" field.</summary>
    public const int ResponseCodeFieldNumber = 1;
    private global::ResponseCode responseCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ResponseCode ResponseCode
    {
        get { return responseCode_; }
        set
        {
            responseCode_ = value;
        }
    }

    /// <summary>Field number for the "debuggingMessages" field.</summary>
    public const int DebuggingMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_debuggingMessages_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> debuggingMessages_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DebuggingMessages
    {
        get { return debuggingMessages_; }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Polaroid> _repeated_images_codec
        = pb::FieldCodec.ForMessage(26, global::Polaroid.Parser);
    private readonly pbc::RepeatedField<global::Polaroid> images_ = new pbc::RepeatedField<global::Polaroid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Polaroid> Images
    {
        get { return images_; }
    }

    /// <summary>Field number for the "useStrict" field.</summary>
    public const int UseStrictFieldNumber = 4;
    private bool useStrict_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStrict
    {
        get { return useStrict_; }
        set
        {
            useStrict_ = value;
        }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 5;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language
    {
        get { return language_; }
        set
        {
            language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "dataFields" field.</summary>
    public const int DataFieldsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::DataField> _repeated_dataFields_codec
        = pb::FieldCodec.ForMessage(50, global::DataField.Parser);
    private readonly pbc::RepeatedField<global::DataField> dataFields_ = new pbc::RepeatedField<global::DataField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataField> DataFields
    {
        get { return dataFields_; }
    }

    /// <summary>Field number for the "transactionID" field.</summary>
    public const int TransactionIDFieldNumber = 7;
    private string transactionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionID
    {
        get { return transactionID_; }
        set
        {
            transactionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 8;
    private string classification_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Classification
    {
        get { return classification_; }
        set
        {
            classification_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 9;
    private string kind_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind
    {
        get { return kind_; }
        set
        {
            kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 10;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description
    {
        get { return description_; }
        set
        {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 11;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country
    {
        get { return country_; }
        set
        {
            country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (ResponseCode != other.ResponseCode) return false;
        if (!debuggingMessages_.Equals(other.debuggingMessages_)) return false;
        if (!images_.Equals(other.images_)) return false;
        if (UseStrict != other.UseStrict) return false;
        if (Language != other.Language) return false;
        if (!dataFields_.Equals(other.dataFields_)) return false;
        if (TransactionID != other.TransactionID) return false;
        if (Classification != other.Classification) return false;
        if (Kind != other.Kind) return false;
        if (Description != other.Description) return false;
        if (Country != other.Country) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
        hash ^= debuggingMessages_.GetHashCode();
        hash ^= images_.GetHashCode();
        if (UseStrict != false) hash ^= UseStrict.GetHashCode();
        if (Language.Length != 0) hash ^= Language.GetHashCode();
        hash ^= dataFields_.GetHashCode();
        if (TransactionID.Length != 0) hash ^= TransactionID.GetHashCode();
        if (Classification.Length != 0) hash ^= Classification.GetHashCode();
        if (Kind.Length != 0) hash ^= Kind.GetHashCode();
        if (Description.Length != 0) hash ^= Description.GetHashCode();
        if (Country.Length != 0) hash ^= Country.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (ResponseCode != 0)
        {
            output.WriteRawTag(8);
            output.WriteEnum((int)ResponseCode);
        }
        debuggingMessages_.WriteTo(output, _repeated_debuggingMessages_codec);
        images_.WriteTo(output, _repeated_images_codec);
        if (UseStrict != false)
        {
            output.WriteRawTag(32);
            output.WriteBool(UseStrict);
        }
        if (Language.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteString(Language);
        }
        dataFields_.WriteTo(output, _repeated_dataFields_codec);
        if (TransactionID.Length != 0)
        {
            output.WriteRawTag(58);
            output.WriteString(TransactionID);
        }
        if (Classification.Length != 0)
        {
            output.WriteRawTag(66);
            output.WriteString(Classification);
        }
        if (Kind.Length != 0)
        {
            output.WriteRawTag(74);
            output.WriteString(Kind);
        }
        if (Description.Length != 0)
        {
            output.WriteRawTag(82);
            output.WriteString(Description);
        }
        if (Country.Length != 0)
        {
            output.WriteRawTag(90);
            output.WriteString(Country);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (ResponseCode != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseCode);
        }
        size += debuggingMessages_.CalculateSize(_repeated_debuggingMessages_codec);
        size += images_.CalculateSize(_repeated_images_codec);
        if (UseStrict != false)
        {
            size += 1 + 1;
        }
        if (Language.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
        }
        size += dataFields_.CalculateSize(_repeated_dataFields_codec);
        if (TransactionID.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionID);
        }
        if (Classification.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Classification);
        }
        if (Kind.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
        }
        if (Description.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
        }
        if (Country.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other)
    {
        if (other == null)
        {
            return;
        }
        if (other.ResponseCode != 0)
        {
            ResponseCode = other.ResponseCode;
        }
        debuggingMessages_.Add(other.debuggingMessages_);
        images_.Add(other.images_);
        if (other.UseStrict != false)
        {
            UseStrict = other.UseStrict;
        }
        if (other.Language.Length != 0)
        {
            Language = other.Language;
        }
        dataFields_.Add(other.dataFields_);
        if (other.TransactionID.Length != 0)
        {
            TransactionID = other.TransactionID;
        }
        if (other.Classification.Length != 0)
        {
            Classification = other.Classification;
        }
        if (other.Kind.Length != 0)
        {
            Kind = other.Kind;
        }
        if (other.Description.Length != 0)
        {
            Description = other.Description;
        }
        if (other.Country.Length != 0)
        {
            Country = other.Country;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        responseCode_ = (global::ResponseCode)input.ReadEnum();
                        break;
                    }
                case 18:
                    {
                        debuggingMessages_.AddEntriesFrom(input, _repeated_debuggingMessages_codec);
                        break;
                    }
                case 26:
                    {
                        images_.AddEntriesFrom(input, _repeated_images_codec);
                        break;
                    }
                case 32:
                    {
                        UseStrict = input.ReadBool();
                        break;
                    }
                case 42:
                    {
                        Language = input.ReadString();
                        break;
                    }
                case 50:
                    {
                        dataFields_.AddEntriesFrom(input, _repeated_dataFields_codec);
                        break;
                    }
                case 58:
                    {
                        TransactionID = input.ReadString();
                        break;
                    }
                case 66:
                    {
                        Classification = input.ReadString();
                        break;
                    }
                case 74:
                    {
                        Kind = input.ReadString();
                        break;
                    }
                case 82:
                    {
                        Description = input.ReadString();
                        break;
                    }
                case 90:
                    {
                        Country = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class DataFieldValuePair : pb::IMessage<DataFieldValuePair>
{
    private static readonly pb::MessageParser<DataFieldValuePair> _parser = new pb::MessageParser<DataFieldValuePair>(() => new DataFieldValuePair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataFieldValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataFieldValuePair()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataFieldValuePair(DataFieldValuePair other) : this()
    {
        DataField = other.dataField_ != null ? other.DataField.Clone() : null;
        value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataFieldValuePair Clone()
    {
        return new DataFieldValuePair(this);
    }

    /// <summary>Field number for the "DataField" field.</summary>
    public const int DataFieldFieldNumber = 1;
    private global::DataField dataField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataField DataField
    {
        get { return dataField_; }
        set
        {
            dataField_ = value;
        }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value
    {
        get { return value_; }
        set
        {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DataFieldValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataFieldValuePair other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(DataField, other.DataField)) return false;
        if (Value != other.Value) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (dataField_ != null) hash ^= DataField.GetHashCode();
        if (Value.Length != 0) hash ^= Value.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (dataField_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(DataField);
        }
        if (Value.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Value);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (dataField_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataField);
        }
        if (Value.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataFieldValuePair other)
    {
        if (other == null)
        {
            return;
        }
        if (other.dataField_ != null)
        {
            if (dataField_ == null)
            {
                dataField_ = new global::DataField();
            }
            DataField.MergeFrom(other.DataField);
        }
        if (other.Value.Length != 0)
        {
            Value = other.Value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        if (dataField_ == null)
                        {
                            dataField_ = new global::DataField();
                        }
                        input.ReadMessage(dataField_);
                        break;
                    }
                case 18:
                    {
                        Value = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class OCRResponse : pb::IMessage<OCRResponse>
{
    private static readonly pb::MessageParser<OCRResponse> _parser = new pb::MessageParser<OCRResponse>(() => new OCRResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OCRResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OCRResponse()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OCRResponse(OCRResponse other) : this()
    {
        dataFieldValuePairs_ = other.dataFieldValuePairs_.Clone();
        imageLabel_ = other.imageLabel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OCRResponse Clone()
    {
        return new OCRResponse(this);
    }

    /// <summary>Field number for the "DataFieldValuePairs" field.</summary>
    public const int DataFieldValuePairsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DataFieldValuePair> _repeated_dataFieldValuePairs_codec
        = pb::FieldCodec.ForMessage(10, global::DataFieldValuePair.Parser);
    private readonly pbc::RepeatedField<global::DataFieldValuePair> dataFieldValuePairs_ = new pbc::RepeatedField<global::DataFieldValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataFieldValuePair> DataFieldValuePairs
    {
        get { return dataFieldValuePairs_; }
    }

    /// <summary>Field number for the "ImageLabel" field.</summary>
    public const int ImageLabelFieldNumber = 2;
    private string imageLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageLabel
    {
        get { return imageLabel_; }
        set
        {
            imageLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as OCRResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OCRResponse other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!dataFieldValuePairs_.Equals(other.dataFieldValuePairs_)) return false;
        if (ImageLabel != other.ImageLabel) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= dataFieldValuePairs_.GetHashCode();
        if (ImageLabel.Length != 0) hash ^= ImageLabel.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        dataFieldValuePairs_.WriteTo(output, _repeated_dataFieldValuePairs_codec);
        if (ImageLabel.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(ImageLabel);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += dataFieldValuePairs_.CalculateSize(_repeated_dataFieldValuePairs_codec);
        if (ImageLabel.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageLabel);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OCRResponse other)
    {
        if (other == null)
        {
            return;
        }
        dataFieldValuePairs_.Add(other.dataFieldValuePairs_);
        if (other.ImageLabel.Length != 0)
        {
            ImageLabel = other.ImageLabel;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        dataFieldValuePairs_.AddEntriesFrom(input, _repeated_dataFieldValuePairs_codec);
                        break;
                    }
                case 18:
                    {
                        ImageLabel = input.ReadString();
                        break;
                    }
            }
        }
    }

}

public sealed partial class PayLoad : pb::IMessage<PayLoad>
{
    private static readonly pb::MessageParser<PayLoad> _parser = new pb::MessageParser<PayLoad>(() => new PayLoad());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayLoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::MessageDefinitionsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayLoad()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayLoad(PayLoad other) : this()
    {
        IncomingRequest = other.incomingRequest_ != null ? other.IncomingRequest.Clone() : null;
        MachineLearningResponse = other.machineLearningResponse_ != null ? other.MachineLearningResponse.Clone() : null;
        BruteForceOCRResults = other.bruteForceOCRResults_ != null ? other.BruteForceOCRResults.Clone() : null;
        TargetedOCRResults = other.targetedOCRResults_ != null ? other.TargetedOCRResults.Clone() : null;
        trustStrict_ = other.trustStrict_;
        processedOcrResult_ = other.processedOcrResult_.Clone();
        usedImageLabel_ = other.usedImageLabel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayLoad Clone()
    {
        return new PayLoad(this);
    }

    /// <summary>Field number for the "IncomingRequest" field.</summary>
    public const int IncomingRequestFieldNumber = 1;
    private global::Request incomingRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Request IncomingRequest
    {
        get { return incomingRequest_; }
        set
        {
            incomingRequest_ = value;
        }
    }

    /// <summary>Field number for the "MachineLearningResponse" field.</summary>
    public const int MachineLearningResponseFieldNumber = 2;
    private global::Response machineLearningResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Response MachineLearningResponse
    {
        get { return machineLearningResponse_; }
        set
        {
            machineLearningResponse_ = value;
        }
    }

    /// <summary>Field number for the "BruteForceOCRResults" field.</summary>
    public const int BruteForceOCRResultsFieldNumber = 3;
    private global::OCRResponse bruteForceOCRResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OCRResponse BruteForceOCRResults
    {
        get { return bruteForceOCRResults_; }
        set
        {
            bruteForceOCRResults_ = value;
        }
    }

    /// <summary>Field number for the "TargetedOCRResults" field.</summary>
    public const int TargetedOCRResultsFieldNumber = 4;
    private global::OCRResponse targetedOCRResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OCRResponse TargetedOCRResults
    {
        get { return targetedOCRResults_; }
        set
        {
            targetedOCRResults_ = value;
        }
    }

    /// <summary>Field number for the "TrustStrict" field.</summary>
    public const int TrustStrictFieldNumber = 5;
    private bool trustStrict_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrustStrict
    {
        get { return trustStrict_; }
        set
        {
            trustStrict_ = value;
        }
    }

    /// <summary>Field number for the "ProcessedOcrResult" field.</summary>
    public const int ProcessedOcrResultFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_processedOcrResult_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> processedOcrResult_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ProcessedOcrResult
    {
        get { return processedOcrResult_; }
    }

    /// <summary>Field number for the "UsedImageLabel" field.</summary>
    public const int UsedImageLabelFieldNumber = 7;
    private global::ImageLabel usedImageLabel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ImageLabel UsedImageLabel
    {
        get { return usedImageLabel_; }
        set
        {
            usedImageLabel_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PayLoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayLoad other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!object.Equals(IncomingRequest, other.IncomingRequest)) return false;
        if (!object.Equals(MachineLearningResponse, other.MachineLearningResponse)) return false;
        if (!object.Equals(BruteForceOCRResults, other.BruteForceOCRResults)) return false;
        if (!object.Equals(TargetedOCRResults, other.TargetedOCRResults)) return false;
        if (TrustStrict != other.TrustStrict) return false;
        if (!ProcessedOcrResult.Equals(other.ProcessedOcrResult)) return false;
        if (UsedImageLabel != other.UsedImageLabel) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (incomingRequest_ != null) hash ^= IncomingRequest.GetHashCode();
        if (machineLearningResponse_ != null) hash ^= MachineLearningResponse.GetHashCode();
        if (bruteForceOCRResults_ != null) hash ^= BruteForceOCRResults.GetHashCode();
        if (targetedOCRResults_ != null) hash ^= TargetedOCRResults.GetHashCode();
        if (TrustStrict != false) hash ^= TrustStrict.GetHashCode();
        hash ^= ProcessedOcrResult.GetHashCode();
        if (UsedImageLabel != 0) hash ^= UsedImageLabel.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (incomingRequest_ != null)
        {
            output.WriteRawTag(10);
            output.WriteMessage(IncomingRequest);
        }
        if (machineLearningResponse_ != null)
        {
            output.WriteRawTag(18);
            output.WriteMessage(MachineLearningResponse);
        }
        if (bruteForceOCRResults_ != null)
        {
            output.WriteRawTag(26);
            output.WriteMessage(BruteForceOCRResults);
        }
        if (targetedOCRResults_ != null)
        {
            output.WriteRawTag(34);
            output.WriteMessage(TargetedOCRResults);
        }
        if (TrustStrict != false)
        {
            output.WriteRawTag(40);
            output.WriteBool(TrustStrict);
        }
        processedOcrResult_.WriteTo(output, _map_processedOcrResult_codec);
        if (UsedImageLabel != 0)
        {
            output.WriteRawTag(56);
            output.WriteEnum((int)UsedImageLabel);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (incomingRequest_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncomingRequest);
        }
        if (machineLearningResponse_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MachineLearningResponse);
        }
        if (bruteForceOCRResults_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BruteForceOCRResults);
        }
        if (targetedOCRResults_ != null)
        {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetedOCRResults);
        }
        if (TrustStrict != false)
        {
            size += 1 + 1;
        }
        size += processedOcrResult_.CalculateSize(_map_processedOcrResult_codec);
        if (UsedImageLabel != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)UsedImageLabel);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayLoad other)
    {
        if (other == null)
        {
            return;
        }
        if (other.incomingRequest_ != null)
        {
            if (incomingRequest_ == null)
            {
                incomingRequest_ = new global::Request();
            }
            IncomingRequest.MergeFrom(other.IncomingRequest);
        }
        if (other.machineLearningResponse_ != null)
        {
            if (machineLearningResponse_ == null)
            {
                machineLearningResponse_ = new global::Response();
            }
            MachineLearningResponse.MergeFrom(other.MachineLearningResponse);
        }
        if (other.bruteForceOCRResults_ != null)
        {
            if (bruteForceOCRResults_ == null)
            {
                bruteForceOCRResults_ = new global::OCRResponse();
            }
            BruteForceOCRResults.MergeFrom(other.BruteForceOCRResults);
        }
        if (other.targetedOCRResults_ != null)
        {
            if (targetedOCRResults_ == null)
            {
                targetedOCRResults_ = new global::OCRResponse();
            }
            TargetedOCRResults.MergeFrom(other.TargetedOCRResults);
        }
        if (other.TrustStrict != false)
        {
            TrustStrict = other.TrustStrict;
        }
        processedOcrResult_.Add(other.processedOcrResult_);
        if (other.UsedImageLabel != 0)
        {
            UsedImageLabel = other.UsedImageLabel;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        if (incomingRequest_ == null)
                        {
                            incomingRequest_ = new global::Request();
                        }
                        input.ReadMessage(incomingRequest_);
                        break;
                    }
                case 18:
                    {
                        if (machineLearningResponse_ == null)
                        {
                            machineLearningResponse_ = new global::Response();
                        }
                        input.ReadMessage(machineLearningResponse_);
                        break;
                    }
                case 26:
                    {
                        if (bruteForceOCRResults_ == null)
                        {
                            bruteForceOCRResults_ = new global::OCRResponse();
                        }
                        input.ReadMessage(bruteForceOCRResults_);
                        break;
                    }
                case 34:
                    {
                        if (targetedOCRResults_ == null)
                        {
                            targetedOCRResults_ = new global::OCRResponse();
                        }
                        input.ReadMessage(targetedOCRResults_);
                        break;
                    }
                case 40:
                    {
                        TrustStrict = input.ReadBool();
                        break;
                    }
                case 50:
                    {
                        processedOcrResult_.AddEntriesFrom(input, _map_processedOcrResult_codec);
                        break;
                    }
                case 56:
                    {
                        usedImageLabel_ = (global::ImageLabel)input.ReadEnum();
                        break;
                    }
            }
        }
    }

}

#endregion


#endregion Designer generated code
