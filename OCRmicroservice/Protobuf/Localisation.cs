// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localisation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from localisation.proto</summary>
public static partial class LocalisationReflection {

  #region Descriptor
  /// <summary>File descriptor for localisation.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static LocalisationReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJsb2NhbGlzYXRpb24ucHJvdG8iIQoQTG9jYWxpc2VEb2N1bWVudBINCgVp",
          "bWFnZRgBIAEoDCIlChRMb2NhbGlzYXRpb25SZXNwb25zZRINCgVpbWFnZRgB",
          "IAEoDGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LocaliseDocument), global::LocaliseDocument.Parser, new[]{ "Image" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocalisationResponse), global::LocalisationResponse.Parser, new[]{ "Image" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LocaliseDocument : pb::IMessage<LocaliseDocument> {
  private static readonly pb::MessageParser<LocaliseDocument> _parser = new pb::MessageParser<LocaliseDocument>(() => new LocaliseDocument());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocaliseDocument> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LocalisationReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocaliseDocument() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocaliseDocument(LocaliseDocument other) : this() {
    image_ = other.image_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocaliseDocument Clone() {
    return new LocaliseDocument(this);
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 1;
  private pb::ByteString image_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocaliseDocument);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocaliseDocument other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Image != other.Image) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Image.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Image);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocaliseDocument other) {
    if (other == null) {
      return;
    }
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Image = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class LocalisationResponse : pb::IMessage<LocalisationResponse> {
  private static readonly pb::MessageParser<LocalisationResponse> _parser = new pb::MessageParser<LocalisationResponse>(() => new LocalisationResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocalisationResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LocalisationReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalisationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalisationResponse(LocalisationResponse other) : this() {
    image_ = other.image_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalisationResponse Clone() {
    return new LocalisationResponse(this);
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 1;
  private pb::ByteString image_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocalisationResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocalisationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Image != other.Image) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Image.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Image);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocalisationResponse other) {
    if (other == null) {
      return;
    }
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Image = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
