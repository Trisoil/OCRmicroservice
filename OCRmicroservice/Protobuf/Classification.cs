// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classification.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from classification.proto</summary>
public static partial class ClassificationReflection {

  #region Descriptor
  /// <summary>File descriptor for classification.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ClassificationReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRjbGFzc2lmaWNhdGlvbi5wcm90bxoOZG9jdW1lbnQucHJvdG8iIQoQQ2xh",
          "c3NpZnlEb2N1bWVudBINCgVpbWFnZRgBIAEoDCLKAQoOQ2xhc3NpZmljYXRp",
          "b24SHQoEaWNhbxgBIAEoCzINLklDQU9Eb2N1bWVudEgAEjMKFGdvdmVybm1l",
          "bnRfaXNzdWVkX2lkGAIgASgLMhMuR292ZXJubWVudElzc3VlZElkSAASJwoJ",
          "c2Vjb25kYXJ5GAMgASgLMhIuU2Vjb25kYXJ5RG9jdW1lbnRIABIbCgdub3Zl",
          "bHR5GAQgASgLMgguTm92ZWx0eUgAEhIKCmNvbmZpZGVuY2UYCiABKAJCCgoI",
          "ZG9jdW1lbnQiCQoHTm92ZWx0eWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::DocumentReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ClassifyDocument), global::ClassifyDocument.Parser, new[]{ "Image" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Classification), global::Classification.Parser, new[]{ "Icao", "GovernmentIssuedId", "Secondary", "Novelty", "Confidence" }, new[]{ "Document" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Novelty), global::Novelty.Parser, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ClassifyDocument : pb::IMessage<ClassifyDocument> {
  private static readonly pb::MessageParser<ClassifyDocument> _parser = new pb::MessageParser<ClassifyDocument>(() => new ClassifyDocument());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClassifyDocument> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClassificationReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyDocument() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyDocument(ClassifyDocument other) : this() {
    image_ = other.image_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClassifyDocument Clone() {
    return new ClassifyDocument(this);
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 1;
  private pb::ByteString image_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClassifyDocument);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClassifyDocument other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Image != other.Image) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Image.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Image);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClassifyDocument other) {
    if (other == null) {
      return;
    }
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Image = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Classification : pb::IMessage<Classification> {
  private static readonly pb::MessageParser<Classification> _parser = new pb::MessageParser<Classification>(() => new Classification());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Classification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClassificationReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Classification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Classification(Classification other) : this() {
    confidence_ = other.confidence_;
    switch (other.DocumentCase) {
      case DocumentOneofCase.Icao:
        Icao = other.Icao.Clone();
        break;
      case DocumentOneofCase.GovernmentIssuedId:
        GovernmentIssuedId = other.GovernmentIssuedId.Clone();
        break;
      case DocumentOneofCase.Secondary:
        Secondary = other.Secondary.Clone();
        break;
      case DocumentOneofCase.Novelty:
        Novelty = other.Novelty.Clone();
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Classification Clone() {
    return new Classification(this);
  }

  /// <summary>Field number for the "icao" field.</summary>
  public const int IcaoFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ICAODocument Icao {
    get { return documentCase_ == DocumentOneofCase.Icao ? (global::ICAODocument) document_ : null; }
    set {
      document_ = value;
      documentCase_ = value == null ? DocumentOneofCase.None : DocumentOneofCase.Icao;
    }
  }

  /// <summary>Field number for the "government_issued_id" field.</summary>
  public const int GovernmentIssuedIdFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GovernmentIssuedId GovernmentIssuedId {
    get { return documentCase_ == DocumentOneofCase.GovernmentIssuedId ? (global::GovernmentIssuedId) document_ : null; }
    set {
      document_ = value;
      documentCase_ = value == null ? DocumentOneofCase.None : DocumentOneofCase.GovernmentIssuedId;
    }
  }

  /// <summary>Field number for the "secondary" field.</summary>
  public const int SecondaryFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SecondaryDocument Secondary {
    get { return documentCase_ == DocumentOneofCase.Secondary ? (global::SecondaryDocument) document_ : null; }
    set {
      document_ = value;
      documentCase_ = value == null ? DocumentOneofCase.None : DocumentOneofCase.Secondary;
    }
  }

  /// <summary>Field number for the "novelty" field.</summary>
  public const int NoveltyFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Novelty Novelty {
    get { return documentCase_ == DocumentOneofCase.Novelty ? (global::Novelty) document_ : null; }
    set {
      document_ = value;
      documentCase_ = value == null ? DocumentOneofCase.None : DocumentOneofCase.Novelty;
    }
  }

  /// <summary>Field number for the "confidence" field.</summary>
  public const int ConfidenceFieldNumber = 10;
  private float confidence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Confidence {
    get { return confidence_; }
    set {
      confidence_ = value;
    }
  }

  private object document_;
  /// <summary>Enum of possible cases for the "document" oneof.</summary>
  public enum DocumentOneofCase {
    None = 0,
    Icao = 1,
    GovernmentIssuedId = 2,
    Secondary = 3,
    Novelty = 4,
  }
  private DocumentOneofCase documentCase_ = DocumentOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DocumentOneofCase DocumentCase {
    get { return documentCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDocument() {
    documentCase_ = DocumentOneofCase.None;
    document_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Classification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Classification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Icao, other.Icao)) return false;
    if (!object.Equals(GovernmentIssuedId, other.GovernmentIssuedId)) return false;
    if (!object.Equals(Secondary, other.Secondary)) return false;
    if (!object.Equals(Novelty, other.Novelty)) return false;
    if (Confidence != other.Confidence) return false;
    if (DocumentCase != other.DocumentCase) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (documentCase_ == DocumentOneofCase.Icao) hash ^= Icao.GetHashCode();
    if (documentCase_ == DocumentOneofCase.GovernmentIssuedId) hash ^= GovernmentIssuedId.GetHashCode();
    if (documentCase_ == DocumentOneofCase.Secondary) hash ^= Secondary.GetHashCode();
    if (documentCase_ == DocumentOneofCase.Novelty) hash ^= Novelty.GetHashCode();
    if (Confidence != 0F) hash ^= Confidence.GetHashCode();
    hash ^= (int) documentCase_;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (documentCase_ == DocumentOneofCase.Icao) {
      output.WriteRawTag(10);
      output.WriteMessage(Icao);
    }
    if (documentCase_ == DocumentOneofCase.GovernmentIssuedId) {
      output.WriteRawTag(18);
      output.WriteMessage(GovernmentIssuedId);
    }
    if (documentCase_ == DocumentOneofCase.Secondary) {
      output.WriteRawTag(26);
      output.WriteMessage(Secondary);
    }
    if (documentCase_ == DocumentOneofCase.Novelty) {
      output.WriteRawTag(34);
      output.WriteMessage(Novelty);
    }
    if (Confidence != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(Confidence);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (documentCase_ == DocumentOneofCase.Icao) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Icao);
    }
    if (documentCase_ == DocumentOneofCase.GovernmentIssuedId) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GovernmentIssuedId);
    }
    if (documentCase_ == DocumentOneofCase.Secondary) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Secondary);
    }
    if (documentCase_ == DocumentOneofCase.Novelty) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Novelty);
    }
    if (Confidence != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Classification other) {
    if (other == null) {
      return;
    }
    if (other.Confidence != 0F) {
      Confidence = other.Confidence;
    }
    switch (other.DocumentCase) {
      case DocumentOneofCase.Icao:
        Icao = other.Icao;
        break;
      case DocumentOneofCase.GovernmentIssuedId:
        GovernmentIssuedId = other.GovernmentIssuedId;
        break;
      case DocumentOneofCase.Secondary:
        Secondary = other.Secondary;
        break;
      case DocumentOneofCase.Novelty:
        Novelty = other.Novelty;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          global::ICAODocument subBuilder = new global::ICAODocument();
          if (documentCase_ == DocumentOneofCase.Icao) {
            subBuilder.MergeFrom(Icao);
          }
          input.ReadMessage(subBuilder);
          Icao = subBuilder;
          break;
        }
        case 18: {
          global::GovernmentIssuedId subBuilder = new global::GovernmentIssuedId();
          if (documentCase_ == DocumentOneofCase.GovernmentIssuedId) {
            subBuilder.MergeFrom(GovernmentIssuedId);
          }
          input.ReadMessage(subBuilder);
          GovernmentIssuedId = subBuilder;
          break;
        }
        case 26: {
          global::SecondaryDocument subBuilder = new global::SecondaryDocument();
          if (documentCase_ == DocumentOneofCase.Secondary) {
            subBuilder.MergeFrom(Secondary);
          }
          input.ReadMessage(subBuilder);
          Secondary = subBuilder;
          break;
        }
        case 34: {
          global::Novelty subBuilder = new global::Novelty();
          if (documentCase_ == DocumentOneofCase.Novelty) {
            subBuilder.MergeFrom(Novelty);
          }
          input.ReadMessage(subBuilder);
          Novelty = subBuilder;
          break;
        }
        case 85: {
          Confidence = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Novelty : pb::IMessage<Novelty> {
  private static readonly pb::MessageParser<Novelty> _parser = new pb::MessageParser<Novelty>(() => new Novelty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Novelty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClassificationReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Novelty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Novelty(Novelty other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Novelty Clone() {
    return new Novelty(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Novelty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Novelty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Novelty other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

#endregion


#endregion Designer generated code
